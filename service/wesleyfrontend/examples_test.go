// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package wesleyfrontend_test

import (
	"fmt"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/wesleyfrontend"
)

var _ time.Duration
var _ strings.Reader
var _ aws.Config

func parseTime(layout, value string) *time.Time {
	t, err := time.Parse(layout, value)
	if err != nil {
		panic(err)
	}
	return &t
}

// To create a new cluster
//
// The following example creates an Amazon EKS cluster called prod.
func ExampleWesleyFrontend_CreateCluster_shared00() {
	svc := wesleyfrontend.New(session.New())
	input := &wesleyfrontend.CreateClusterInput{
		ClientRequestToken: aws.String("1d2129a1-3d38-460a-9756-e5b91fddb951"),
		Name:               aws.String("prod"),
		ResourcesVpcConfig: &wesleyfrontend.VpcConfigRequest{
			SecurityGroupIds: []*string{
				aws.String("sg-6979fe18"),
			},
			SubnetIds: []*string{
				aws.String("subnet-6782e71e"),
				aws.String("subnet-e7e761ac"),
			},
		},
		RoleArn: aws.String("arn:aws:iam::012345678910:role/eks-service-role-AWSServiceRoleForAmazonEKS-J7ONKE3BQ4PI"),
		Version: aws.String("1.10"),
	}

	result, err := svc.CreateCluster(input)
	if err != nil {
		if aerr, ok := err.(awserr.Error); ok {
			switch aerr.Code() {
			case wesleyfrontend.ErrCodeResourceInUseException:
				fmt.Println(wesleyfrontend.ErrCodeResourceInUseException, aerr.Error())
			case wesleyfrontend.ErrCodeResourceLimitExceededException:
				fmt.Println(wesleyfrontend.ErrCodeResourceLimitExceededException, aerr.Error())
			case wesleyfrontend.ErrCodeInvalidParameterException:
				fmt.Println(wesleyfrontend.ErrCodeInvalidParameterException, aerr.Error())
			case wesleyfrontend.ErrCodeClientException:
				fmt.Println(wesleyfrontend.ErrCodeClientException, aerr.Error())
			case wesleyfrontend.ErrCodeServerException:
				fmt.Println(wesleyfrontend.ErrCodeServerException, aerr.Error())
			case wesleyfrontend.ErrCodeServiceUnavailableException:
				fmt.Println(wesleyfrontend.ErrCodeServiceUnavailableException, aerr.Error())
			case wesleyfrontend.ErrCodeUnsupportedAvailabilityZoneException:
				fmt.Println(wesleyfrontend.ErrCodeUnsupportedAvailabilityZoneException, aerr.Error())
			default:
				fmt.Println(aerr.Error())
			}
		} else {
			// Print the error, cast err to awserr.Error to get the Code and
			// Message from an error.
			fmt.Println(err.Error())
		}
		return
	}

	fmt.Println(result)
}

// To delete a cluster
//
// This example command deletes a cluster named `devel` in your default region.
func ExampleWesleyFrontend_DeleteCluster_shared00() {
	svc := wesleyfrontend.New(session.New())
	input := &wesleyfrontend.DeleteClusterInput{
		Name: aws.String("devel"),
	}

	result, err := svc.DeleteCluster(input)
	if err != nil {
		if aerr, ok := err.(awserr.Error); ok {
			switch aerr.Code() {
			case wesleyfrontend.ErrCodeResourceInUseException:
				fmt.Println(wesleyfrontend.ErrCodeResourceInUseException, aerr.Error())
			case wesleyfrontend.ErrCodeResourceNotFoundException:
				fmt.Println(wesleyfrontend.ErrCodeResourceNotFoundException, aerr.Error())
			case wesleyfrontend.ErrCodeClientException:
				fmt.Println(wesleyfrontend.ErrCodeClientException, aerr.Error())
			case wesleyfrontend.ErrCodeServerException:
				fmt.Println(wesleyfrontend.ErrCodeServerException, aerr.Error())
			case wesleyfrontend.ErrCodeServiceUnavailableException:
				fmt.Println(wesleyfrontend.ErrCodeServiceUnavailableException, aerr.Error())
			default:
				fmt.Println(aerr.Error())
			}
		} else {
			// Print the error, cast err to awserr.Error to get the Code and
			// Message from an error.
			fmt.Println(err.Error())
		}
		return
	}

	fmt.Println(result)
}

// To describe a cluster
//
// This example command provides a description of the specified cluster in your default
// region.
func ExampleWesleyFrontend_DescribeCluster_shared00() {
	svc := wesleyfrontend.New(session.New())
	input := &wesleyfrontend.DescribeClusterInput{
		Name: aws.String("devel"),
	}

	result, err := svc.DescribeCluster(input)
	if err != nil {
		if aerr, ok := err.(awserr.Error); ok {
			switch aerr.Code() {
			case wesleyfrontend.ErrCodeResourceNotFoundException:
				fmt.Println(wesleyfrontend.ErrCodeResourceNotFoundException, aerr.Error())
			case wesleyfrontend.ErrCodeClientException:
				fmt.Println(wesleyfrontend.ErrCodeClientException, aerr.Error())
			case wesleyfrontend.ErrCodeServerException:
				fmt.Println(wesleyfrontend.ErrCodeServerException, aerr.Error())
			case wesleyfrontend.ErrCodeServiceUnavailableException:
				fmt.Println(wesleyfrontend.ErrCodeServiceUnavailableException, aerr.Error())
			default:
				fmt.Println(aerr.Error())
			}
		} else {
			// Print the error, cast err to awserr.Error to get the Code and
			// Message from an error.
			fmt.Println(err.Error())
		}
		return
	}

	fmt.Println(result)
}

// To list your available clusters
//
// This example command lists all of your available clusters in your default region.
func ExampleWesleyFrontend_ListClusters_shared00() {
	svc := wesleyfrontend.New(session.New())
	input := &wesleyfrontend.ListClustersInput{}

	result, err := svc.ListClusters(input)
	if err != nil {
		if aerr, ok := err.(awserr.Error); ok {
			switch aerr.Code() {
			case wesleyfrontend.ErrCodeInvalidParameterException:
				fmt.Println(wesleyfrontend.ErrCodeInvalidParameterException, aerr.Error())
			case wesleyfrontend.ErrCodeClientException:
				fmt.Println(wesleyfrontend.ErrCodeClientException, aerr.Error())
			case wesleyfrontend.ErrCodeServerException:
				fmt.Println(wesleyfrontend.ErrCodeServerException, aerr.Error())
			case wesleyfrontend.ErrCodeServiceUnavailableException:
				fmt.Println(wesleyfrontend.ErrCodeServiceUnavailableException, aerr.Error())
			default:
				fmt.Println(aerr.Error())
			}
		} else {
			// Print the error, cast err to awserr.Error to get the Code and
			// Message from an error.
			fmt.Println(err.Error())
		}
		return
	}

	fmt.Println(result)
}

// To list tags for a cluster
//
// This example lists all of the tags for the `beta` cluster.
func ExampleWesleyFrontend_ListTagsForResource_shared00() {
	svc := wesleyfrontend.New(session.New())
	input := &wesleyfrontend.ListTagsForResourceInput{
		ResourceArn: aws.String("arn:aws:eks:us-west-2:012345678910:cluster/beta"),
	}

	result, err := svc.ListTagsForResource(input)
	if err != nil {
		if aerr, ok := err.(awserr.Error); ok {
			switch aerr.Code() {
			case wesleyfrontend.ErrCodeBadRequestException:
				fmt.Println(wesleyfrontend.ErrCodeBadRequestException, aerr.Error())
			case wesleyfrontend.ErrCodeNotFoundException:
				fmt.Println(wesleyfrontend.ErrCodeNotFoundException, aerr.Error())
			default:
				fmt.Println(aerr.Error())
			}
		} else {
			// Print the error, cast err to awserr.Error to get the Code and
			// Message from an error.
			fmt.Println(err.Error())
		}
		return
	}

	fmt.Println(result)
}
